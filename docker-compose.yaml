services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: notes-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: notes_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - notes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d notes_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: notes-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:password@postgres:5432/notes_db
    ports:
      - "3001:3001"
    networks:
      - notes-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: notes-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    networks:
      - notes-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Networks
networks:
  notes-network:
    driver: bridge
    name: notes-network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: notes-postgres-data
